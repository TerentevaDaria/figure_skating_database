version: '3.9'

networks:
    demo_:

services:
  grafana:
    networks: [ demo_ ]
    image: grafana/grafana
    ports:
      - 3000:3000

  prometheus:
    networks: [ demo_ ]
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  
  postgres-exporter:
    networks: [ demo_ ]
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_NAME: "postgres://postgres:postgres@haproxy:5000/figure_skating?sslmode=disable"
    links:
      - haproxy
      - prometheus
  
  python-app:
    networks: [ demo_ ]
    build:
      context: .
      dockerfile: python.Dockerfile
    depends_on:
      - haproxy
    restart: "on-failure"
    volumes:
      - ./data_generation/:/data_generation
    environment:
      - GENERATE=False
      - POSTGRES_HOST=haproxy
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=figure_skating
      - POSTGRES_PORT=5000
      - CONNECTION_ATTEMPTS=100
      - ATHLETES_COUNT=10000
      - USERS_COUNT=100000
      - COMPETITION_COUNT=10000

  initdb:
      networks: [ demo_ ]
      build:
        context: .
        dockerfile: init.Dockerfile
      volumes:
        - ./init/:/init
        - ./migration/:/migration
        - ./roles/:/roles
      depends_on:
        - haproxy
      restart: "on-failure"
      environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres

  analyze:
    networks: [ demo_ ]
    build:
      context: .
      dockerfile: python.Dockerfile
    depends_on:
      - haproxy
    restart: "on-failure"
    volumes:
      - ./analyze/:/data_generation
      - ./data/:/data
    environment:
      - COUNT=100
      - POSTGRES_HOST=haproxy
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=figure_skating
      - POSTGRES_PORT=5000
      - CONNECTION_ATTEMPTS=100
    
  backup:
    networks: [ demo_ ]
    build:
      context: .
      dockerfile: backup.Dockerfile
    volumes:
      - ./backups/:/backups
      - ./backup/:/init
    depends_on:
      - haproxy
    stdin_open: true
    tty: true
    restart: "on-failure"
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - VERSION=1.0.0
      - N=1
      - M=1

  
  etcd1: &etcd
        image: ${PATRONI_TEST_IMAGE:-patroni}
        networks: [ demo_ ]
        environment:
            ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
            ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
            ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380
            ETCD_INITIAL_CLUSTER_STATE: new
            ETCD_INITIAL_CLUSTER_TOKEN: tutorial
            ETCD_UNSUPPORTED_ARCH: arm64
        container_name: demo_-etcd1
        hostname: etcd1
        command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  etcd2:
      <<: *etcd
      container_name: demo_-etcd2
      hostname: etcd2
      command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  haproxy:
      image: ${PATRONI_TEST_IMAGE:-patroni}
      networks: [ demo_ ]
      env_file: patroni.env
      hostname: haproxy
      container_name: demo_-haproxy
      ports:
          - "5000:5000"
          - "5001:5001"
      command: haproxy
      environment: &haproxy_env
          ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379
          PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379'"
          PATRONI_SCOPE: demo_

  patroni1:
          image: ${PATRONI_TEST_IMAGE:-patroni}
          networks: [ demo_ ]
          env_file: patroni.env
          hostname: patroni1
          container_name: demo_-patroni1
          environment:
              <<: *haproxy_env
              PATRONI_NAME: patroni1
              VERSION: 1.0.0


  patroni2:
      image: ${PATRONI_TEST_IMAGE:-patroni}
      networks: [ demo_ ]
      env_file: patroni.env
      hostname: patroni2
      container_name: demo_-patroni2
      environment:
          <<: *haproxy_env
          PATRONI_NAME: patroni2